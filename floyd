#include<iostream>
#include<algorithm>
using namespace std;
const int N=100,INF=1e9;
int vn=4,en=8;//定点数 ,边数 
int d[N][N];
void floyd(int d[N][N]){
    for(int k=1;k<=vn;k++)
        for(int i=1;i<=vn;i++)
            for(int j=1;j<=vn;j++)
                d[i][j]=min(d[i][j],d[i][k]+d[k][j]);
}
createGraph(int d[N][N]){
	
	d[1][2]=2;d[1][3]=6;d[1][4]=4;
	
	d[2][3]=3;
	
	d[3][1]=7;d[3][4]=1;
	
	d[4][1]=5;d[4][3]=12;
}
int main()
{
	cout<<"该有向图中有4各顶点，8条边"<<endl;
	cout<<"--------------------------"<<endl;
    //做初始化
    for(int i=1;i<=vn;i++)
        for(int j=1;j<=vn;j++){
            if(i==j)d[i][j]=0;
            else d[i][j]=INF;
        }
    //存储各边信息； 
	createGraph(d); 
	//Floyd算法求最短距离
    floyd(d);
    int x=0,y=0;
    cout<<"请输入求最短距离的两点:"<<endl;
    cout<<"(输入-1 -1 时停止提问)"<<endl;
    cout<<endl;
    cin>>x>>y;
    while(x!=-1 && y!=-1)
    {
        if(d[x][y]>INF/2)
			cout<<"v"<<x<<"到v"<<y<<"无路径"<<endl;
        else
		{
			cout<<"v"<<x<<"到v"<<y<<"的最短距离为："<<d[x][y]<<endl;
		}
			cout<<endl;
		cout<<"请输入求最短距离的两点:"<<endl;
		cin>>x>>y;
    }
    return 0;
}
