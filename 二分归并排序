#include<stdio.h>
#include<stdlib.h>
#define N 8		//数组大小 
void Merge(int A[],int p, int q, int r)
{
	int B[N];	//暂时存放数据的数组
	int x=p, y=p, z=q+1;
	while (x<=q&&z<=r){	//对A数组左右两边的数据进行比较，按序排列放入暂存数组B中
		if (A[x] < A[z]) B[y++] = A[x++];
		else B[y++] = A[z++];
	}
	while (x <= q){	//为下次归并做预处理
		B[y++] = A[x++];
	}
	while (z<=r){	//为下次归并做预处理
		B[y++] = A[z++];
	}
	for (y = p; y <= r; y++){	//比较完毕，将暂时存放的数据作为归并结果存放回A
		A[y] = B[y];
	}
}

void MergeSort(int A[],int p,int r)
{
	if (p < r){
		int q = (p + r) / 2;
		MergeSort(A,p,q);		//排序左半边
		MergeSort(A,q + 1,r);	//排序右半边
		Merge(A,p,q,r);			//将左半边和右半边结合起来归并
	}
}

int main() 
{	
	int A[N] ;
	for(int i=0;i<8;i++){	//随机生成数组 
		int a = rand() % 20;
		A[i]=a;
	}
	printf("数组大小为 %d：\n",N); 
	printf("随机生成未排序数组：\n"); 
	for(int i=0;i<8;i++){	//输出排序前数组 
		printf("%d ",A[i]);
	}
	printf("\n");
	MergeSort(A,0,N-1);
	printf("---------------------\n");
	printf("二分归并排序后数组：\n");
	for (int i = 0; i < N; i++) 
	{
		printf("%d ",A[i]);
	}
}
